version: "3.9"

services:
  kratos-migrate:
    image: oryd/kratos:v0.7.4-alpha.1-sqlite
    environment:
      - DSN=sqlite:///var/lib/sqlite/db.sqlite?_fk=true&mode=rwc
    volumes:
      - type: volume
        source: kratos-sqlite
        target: /var/lib/sqlite
        read_only: false
      - type: bind
        source: ./kratos
        target: /etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
  kratos:
    depends_on:
      - kratos-migrate
      - envoy
    image: oryd/kratos:v0.7.4-alpha.1-sqlite
    ports:
      - "4433:4433" # public
      - "4434:4434" # admin
    restart: unless-stopped
    environment:
      - DSN=sqlite:///var/lib/sqlite/db.sqlite?_fk=true
      - LOG_LEVEL=trace
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      - type: volume
        source: kratos-sqlite
        target: /var/lib/sqlite
        read_only: false
      - type: bind
        source: ./kratos
        target: /etc/config/kratos
  envoy:
    image: envoyproxy/envoy:v1.20.0
    command: envoy -c /envoy.yaml
    depends_on:
      - postgrpc
    ports:
      - "8080:8080" # FIXME: hide behind oathkeeper
    volumes:
      - ./envoy.yaml:/envoy.yaml
      - ./postgrpc.pb:/proto/postgrpc.pb
  postgrpc:
    build:
      context: ../../../
      dockerfile: postgrpc/Dockerfile
    depends_on:
      - postgres
    environment:
      - HOST=0.0.0.0
      - PGHOST=postgres
      - PGDBNAME=appdb
      - PGUSER=appuser
      - PGPASSWORD=supersecretpassword
      - RUST_LOG=info
  postgres:
    image: postgres
    ports:
      - "5432:5432" # FIXME
    environment:
      - POSTGRES_PASSWORD=superuserpassword
    volumes:
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh
  app:
    build:
      context: ./app
      args:
        - REACT_APP_KRATOS_PUBLIC_URL=http://127.0.0.1:4433
    ports:
      - "4455:4455"
    depends_on:
      - kratos
    environment:
      - PORT=4455

  # TODO:
  # use kratos registration hooks to create postgres roles for each app user
  # include oathkeeper proxy in front of postgrpc
  # write custom "secureapp" that:
  # - allows users to CRUD their own notes
  # BONUS: use registered queries for extra security

volumes:
  kratos-sqlite:
